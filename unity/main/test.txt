
declare namespace System {
	interface Action<T> extends System.MulticastDelegate {
	}
	interface Attribute {
		TypeId: any;
	}
	interface Delegate {
		Method: System.Reflection.MethodInfo;
		Target: any;
	}
	interface Guid {
	}
	interface ModuleHandle {
		MDStreamVersion: number;
	}
	interface MulticastDelegate extends System.Delegate {
	}
	interface RuntimeFieldHandle {
		Value: number;
	}
	interface RuntimeMethodHandle {
		Value: number;
	}
	interface RuntimeTypeHandle {
		Value: number;
	}
	interface Type extends System.Reflection.MemberInfo {
		Assembly: System.Reflection.Assembly;
		AssemblyQualifiedName: string;
		Attributes: System.Reflection.TypeAttributes;
		BaseType: System.Type;
		ContainsGenericParameters: boolean;
		DeclaringMethod: System.Reflection.MethodBase;
		DeclaringType: System.Type;
		DefaultBinder: System.Reflection.Binder;
		FullName: string;
		GenericParameterAttributes: System.Reflection.GenericParameterAttributes;
		GenericParameterPosition: number;
		GenericTypeArguments: System.Type[];
		GUID: System.Guid;
		HasElementType: boolean;
		IsAbstract: boolean;
		IsAnsiClass: boolean;
		IsArray: boolean;
		IsAutoClass: boolean;
		IsAutoLayout: boolean;
		IsByRef: boolean;
		IsClass: boolean;
		IsCOMObject: boolean;
		IsConstructedGenericType: boolean;
		IsContextful: boolean;
		IsEnum: boolean;
		IsExplicitLayout: boolean;
		IsGenericParameter: boolean;
		IsGenericType: boolean;
		IsGenericTypeDefinition: boolean;
		IsImport: boolean;
		IsInterface: boolean;
		IsLayoutSequential: boolean;
		IsMarshalByRef: boolean;
		IsNested: boolean;
		IsNestedAssembly: boolean;
		IsNestedFamANDAssem: boolean;
		IsNestedFamily: boolean;
		IsNestedFamORAssem: boolean;
		IsNestedPrivate: boolean;
		IsNestedPublic: boolean;
		IsNotPublic: boolean;
		IsPointer: boolean;
		IsPrimitive: boolean;
		IsPublic: boolean;
		IsSealed: boolean;
		IsSecurityCritical: boolean;
		IsSecuritySafeCritical: boolean;
		IsSecurityTransparent: boolean;
		IsSerializable: boolean;
		IsSpecialName: boolean;
		IsSZArray: boolean;
		IsUnicodeClass: boolean;
		IsValueType: boolean;
		IsVisible: boolean;
		MemberType: System.Reflection.MemberTypes;
		Module: System.Reflection.Module;
		Namespace: string;
		ReflectedType: System.Type;
		StructLayoutAttribute: System.Runtime.InteropServices.StructLayoutAttribute;
		TypeHandle: System.RuntimeTypeHandle;
		TypeInitializer: System.Reflection.ConstructorInfo;
		UnderlyingSystemType: System.Type;
	}
}
declare namespace System.Reflection {
	export const enum CallingConventions {
		Standard = 1,
		VarArgs = 2,
		Any = 3,
		HasThis = 32,
		ExplicitThis = 64
	}
	export const enum EventAttributes {
		None = 0,
		SpecialName = 512,
		ReservedMask = 1024,
		RTSpecialName = 1024
	}
	export const enum FieldAttributes {
		FieldAccessMask = 7,
		PrivateScope = 0,
		Private = 1,
		FamANDAssem = 2,
		Assembly = 3,
		Family = 4,
		FamORAssem = 5,
		Public = 6,
		Static = 16,
		InitOnly = 32,
		Literal = 64,
		NotSerialized = 128,
		SpecialName = 512,
		PinvokeImpl = 8192,
		ReservedMask = 38144,
		RTSpecialName = 1024,
		HasFieldMarshal = 4096,
		HasDefault = 32768,
		HasFieldRVA = 256
	}
	export const enum GenericParameterAttributes {
		None = 0,
		VarianceMask = 3,
		Covariant = 1,
		Contravariant = 2,
		SpecialConstraintMask = 28,
		ReferenceTypeConstraint = 4,
		NotNullableValueTypeConstraint = 8,
		DefaultConstructorConstraint = 16
	}
	export const enum MemberTypes {
		Constructor = 1,
		Event = 2,
		Field = 4,
		Method = 8,
		Property = 16,
		TypeInfo = 32,
		Custom = 64,
		NestedType = 128,
		All = 191
	}
	export const enum MethodAttributes {
		MemberAccessMask = 7,
		PrivateScope = 0,
		Private = 1,
		FamANDAssem = 2,
		Assembly = 3,
		Family = 4,
		FamORAssem = 5,
		Public = 6,
		Static = 16,
		Final = 32,
		Virtual = 64,
		HideBySig = 128,
		CheckAccessOnOverride = 512,
		VtableLayoutMask = 256,
		ReuseSlot = 0,
		NewSlot = 256,
		Abstract = 1024,
		SpecialName = 2048,
		PinvokeImpl = 8192,
		UnmanagedExport = 8,
		RTSpecialName = 4096,
		ReservedMask = 53248,
		HasSecurity = 16384,
		RequireSecObject = 32768
	}
	export const enum MethodImplAttributes {
		CodeTypeMask = 3,
		IL = 0,
		Native = 1,
		OPTIL = 2,
		Runtime = 3,
		ManagedMask = 4,
		Unmanaged = 4,
		Managed = 0,
		ForwardRef = 16,
		PreserveSig = 128,
		InternalCall = 4096,
		Synchronized = 32,
		NoInlining = 8,
		AggressiveInlining = 256,
		NoOptimization = 64,
		MaxMethodImplVal = 65535
	}
	export const enum ParameterAttributes {
		None = 0,
		In = 1,
		Out = 2,
		Lcid = 4,
		Retval = 8,
		Optional = 16,
		ReservedMask = 61440,
		HasDefault = 4096,
		HasFieldMarshal = 8192,
		Reserved3 = 16384,
		Reserved4 = 32768
	}
	export const enum PropertyAttributes {
		None = 0,
		SpecialName = 512,
		ReservedMask = 62464,
		RTSpecialName = 1024,
		HasDefault = 4096,
		Reserved2 = 8192,
		Reserved3 = 16384,
		Reserved4 = 32768
	}
	export const enum TypeAttributes {
		VisibilityMask = 7,
		NotPublic = 0,
		Public = 1,
		NestedPublic = 2,
		NestedPrivate = 3,
		NestedFamily = 4,
		NestedAssembly = 5,
		NestedFamANDAssem = 6,
		NestedFamORAssem = 7,
		LayoutMask = 24,
		AutoLayout = 0,
		SequentialLayout = 8,
		ExplicitLayout = 16,
		ClassSemanticsMask = 32,
		Class = 0,
		Interface = 32,
		Abstract = 128,
		Sealed = 256,
		SpecialName = 1024,
		Import = 4096,
		Serializable = 8192,
		WindowsRuntime = 16384,
		StringFormatMask = 196608,
		AnsiClass = 0,
		UnicodeClass = 65536,
		AutoClass = 131072,
		CustomFormatClass = 196608,
		CustomFormatMask = 12582912,
		BeforeFieldInit = 1048576,
		ReservedMask = 264192,
		RTSpecialName = 2048,
		HasSecurity = 262144
	}
	interface Assembly {
		CodeBase: string;
		CustomAttributes: System.Reflection.CustomAttributeData[];
		DefinedTypes: System.Reflection.TypeInfo[];
		EntryPoint: System.Reflection.MethodInfo;
		EscapedCodeBase: string;
		Evidence: any;
		ExportedTypes: System.Type[];
		FullName: string;
		GlobalAssemblyCache: boolean;
		HostContext: number;
		ImageRuntimeVersion: string;
		IsDynamic: boolean;
		IsFullyTrusted: boolean;
		Location: string;
		ManifestModule: System.Reflection.Module;
		Modules: System.Reflection.Module[];
		PermissionSet: any;
		ReflectionOnly: boolean;
		SecurityRuleSet: System.Security.SecurityRuleSet;
	}
	interface Binder {
	}
	interface ConstructorInfo extends System.Reflection.MethodBase {
		MemberType: System.Reflection.MemberTypes;
	}
	interface CustomAttributeData {
		AttributeType: System.Type;
		Constructor: System.Reflection.ConstructorInfo;
		ConstructorArguments: System.Reflection.CustomAttributeTypedArgument[];
		NamedArguments: System.Reflection.CustomAttributeNamedArgument[];
	}
	interface CustomAttributeNamedArgument {
		IsField: boolean;
		MemberInfo: System.Reflection.MemberInfo;
		MemberName: string;
		TypedValue: System.Reflection.CustomAttributeTypedArgument;
	}
	interface CustomAttributeTypedArgument {
		ArgumentType: System.Type;
		Value: any;
	}
	interface EventInfo extends System.Reflection.MemberInfo {
		AddMethod: System.Reflection.MethodInfo;
		Attributes: System.Reflection.EventAttributes;
		EventHandlerType: System.Type;
		IsMulticast: boolean;
		IsSpecialName: boolean;
		MemberType: System.Reflection.MemberTypes;
		RaiseMethod: System.Reflection.MethodInfo;
		RemoveMethod: System.Reflection.MethodInfo;
	}
	interface FieldInfo extends System.Reflection.MemberInfo {
		Attributes: System.Reflection.FieldAttributes;
		FieldHandle: System.RuntimeFieldHandle;
		FieldType: System.Type;
		IsAssembly: boolean;
		IsFamily: boolean;
		IsFamilyAndAssembly: boolean;
		IsFamilyOrAssembly: boolean;
		IsInitOnly: boolean;
		IsLiteral: boolean;
		IsNotSerialized: boolean;
		IsPinvokeImpl: boolean;
		IsPrivate: boolean;
		IsPublic: boolean;
		IsSecurityCritical: boolean;
		IsSecuritySafeCritical: boolean;
		IsSecurityTransparent: boolean;
		IsSpecialName: boolean;
		IsStatic: boolean;
		MemberType: System.Reflection.MemberTypes;
	}
	interface ICustomAttributeProvider {
	}
	interface MemberInfo {
		CustomAttributes: System.Reflection.CustomAttributeData[];
		DeclaringType: System.Type;
		MemberType: System.Reflection.MemberTypes;
		MetadataToken: number;
		Module: System.Reflection.Module;
		Name: string;
		ReflectedType: System.Type;
	}
	interface MethodBase extends System.Reflection.MemberInfo {
		Attributes: System.Reflection.MethodAttributes;
		CallingConvention: System.Reflection.CallingConventions;
		ContainsGenericParameters: boolean;
		IsAbstract: boolean;
		IsAssembly: boolean;
		IsConstructor: boolean;
		IsFamily: boolean;
		IsFamilyAndAssembly: boolean;
		IsFamilyOrAssembly: boolean;
		IsFinal: boolean;
		IsGenericMethod: boolean;
		IsGenericMethodDefinition: boolean;
		IsHideBySig: boolean;
		IsPrivate: boolean;
		IsPublic: boolean;
		IsSecurityCritical: boolean;
		IsSecuritySafeCritical: boolean;
		IsSecurityTransparent: boolean;
		IsSpecialName: boolean;
		IsStatic: boolean;
		IsVirtual: boolean;
		MethodHandle: System.RuntimeMethodHandle;
		MethodImplementationFlags: System.Reflection.MethodImplAttributes;
	}
	interface MethodInfo extends System.Reflection.MethodBase {
		MemberType: System.Reflection.MemberTypes;
		ReturnParameter: System.Reflection.ParameterInfo;
		ReturnType: System.Type;
		ReturnTypeCustomAttributes: System.Reflection.ICustomAttributeProvider;
	}
	interface Module {
		Assembly: System.Reflection.Assembly;
		CustomAttributes: System.Reflection.CustomAttributeData[];
		FullyQualifiedName: string;
		MDStreamVersion: number;
		MetadataToken: number;
		ModuleHandle: System.ModuleHandle;
		ModuleVersionId: System.Guid;
		Name: string;
		ScopeName: string;
	}
	interface ParameterInfo {
		Attributes: System.Reflection.ParameterAttributes;
		CustomAttributes: System.Reflection.CustomAttributeData[];
		DefaultValue: any;
		HasDefaultValue: boolean;
		IsIn: boolean;
		IsLcid: boolean;
		IsOptional: boolean;
		IsOut: boolean;
		IsRetval: boolean;
		Member: System.Reflection.MemberInfo;
		MetadataToken: number;
		Name: string;
		ParameterType: System.Type;
		Position: number;
		RawDefaultValue: any;
	}
	interface PropertyInfo extends System.Reflection.MemberInfo {
		Attributes: System.Reflection.PropertyAttributes;
		CanRead: boolean;
		CanWrite: boolean;
		GetMethod: System.Reflection.MethodInfo;
		IsSpecialName: boolean;
		MemberType: System.Reflection.MemberTypes;
		PropertyType: System.Type;
		SetMethod: System.Reflection.MethodInfo;
	}
	interface TypeInfo extends System.Type {
		DeclaredConstructors: System.Reflection.ConstructorInfo[];
		DeclaredEvents: System.Reflection.EventInfo[];
		DeclaredFields: System.Reflection.FieldInfo[];
		DeclaredMembers: System.Reflection.MemberInfo[];
		DeclaredMethods: System.Reflection.MethodInfo[];
		DeclaredNestedTypes: System.Reflection.TypeInfo[];
		DeclaredProperties: System.Reflection.PropertyInfo[];
		GenericTypeParameters: System.Type[];
		ImplementedInterfaces: System.Type[];
	}
}
declare namespace System.Runtime.InteropServices {
	export const enum LayoutKind {
		Sequential = 0,
		Explicit = 2,
		Auto = 3
	}
	interface StructLayoutAttribute extends System.Attribute {
		Value: System.Runtime.InteropServices.LayoutKind;
	}
}
declare namespace System.Security {
	export const enum SecurityRuleSet {
		None = 0,
		Level1 = 1,
		Level2 = 2
	}
}
declare namespace UnityEngine {
	export const enum AnisotropicFiltering {
		Disable = 0,
		Enable = 1,
		ForceEnable = 2
	}
	export const enum FilterMode {
		Point = 0,
		Bilinear = 1,
		Trilinear = 2
	}
	export const enum FontStyle {
		Normal = 0,
		Bold = 1,
		Italic = 2,
		BoldAndItalic = 3
	}
	export const enum HideFlags {
		None = 0,
		HideInHierarchy = 1,
		HideInInspector = 2,
		DontSaveInEditor = 4,
		NotEditable = 8,
		DontSaveInBuild = 16,
		DontUnloadUnusedAsset = 32,
		DontSave = 52,
		HideAndDontSave = 61
	}
	export const enum MaterialGlobalIlluminationFlags {
		None = 0,
		RealtimeEmissive = 1,
		BakedEmissive = 2,
		EmissiveIsBlack = 4,
		AnyEmissive = 3
	}
	export const enum ScaleMode {
		StretchToFill = 0,
		ScaleAndCrop = 1,
		ScaleToFit = 2
	}
	export const enum TextAnchor {
		UpperLeft = 0,
		UpperCenter = 1,
		UpperRight = 2,
		MiddleLeft = 3,
		MiddleCenter = 4,
		MiddleRight = 5,
		LowerLeft = 6,
		LowerCenter = 7,
		LowerRight = 8
	}
	export const enum TextureFormat {
		Alpha8 = 1,
		ARGB4444 = 2,
		RGB24 = 3,
		RGBA32 = 4,
		ARGB32 = 5,
		RGB565 = 7,
		R16 = 9,
		DXT1 = 10,
		DXT5 = 12,
		RGBA4444 = 13,
		BGRA32 = 14,
		RHalf = 15,
		RGHalf = 16,
		RGBAHalf = 17,
		RFloat = 18,
		RGFloat = 19,
		RGBAFloat = 20,
		YUY2 = 21,
		RGB9e5Float = 22,
		BC4 = 26,
		BC5 = 27,
		BC6H = 24,
		BC7 = 25,
		DXT1Crunched = 28,
		DXT5Crunched = 29,
		PVRTC_RGB2 = 30,
		PVRTC_RGBA2 = 31,
		PVRTC_RGB4 = 32,
		PVRTC_RGBA4 = 33,
		ETC_RGB4 = 34,
		ATC_RGB4 = -127,
		ATC_RGBA8 = -127,
		EAC_R = 41,
		EAC_R_SIGNED = 42,
		EAC_RG = 43,
		EAC_RG_SIGNED = 44,
		ETC2_RGB = 45,
		ETC2_RGBA1 = 46,
		ETC2_RGBA8 = 47,
		ASTC_4x4 = 48,
		ASTC_5x5 = 49,
		ASTC_6x6 = 50,
		ASTC_8x8 = 51,
		ASTC_10x10 = 52,
		ASTC_12x12 = 53,
		ETC_RGB4_3DS = 60,
		ETC_RGBA8_3DS = 61,
		RG16 = 62,
		R8 = 63,
		ETC_RGB4Crunched = 64,
		ETC2_RGBA8Crunched = 65,
		ASTC_HDR_4x4 = 66,
		ASTC_HDR_5x5 = 67,
		ASTC_HDR_6x6 = 68,
		ASTC_HDR_8x8 = 69,
		ASTC_HDR_10x10 = 70,
		ASTC_HDR_12x12 = 71,
		ASTC_RGB_4x4 = 48,
		ASTC_RGB_5x5 = 49,
		ASTC_RGB_6x6 = 50,
		ASTC_RGB_8x8 = 51,
		ASTC_RGB_10x10 = 52,
		ASTC_RGB_12x12 = 53,
		ASTC_RGBA_4x4 = 54,
		ASTC_RGBA_5x5 = 55,
		ASTC_RGBA_6x6 = 56,
		ASTC_RGBA_8x8 = 57,
		ASTC_RGBA_10x10 = 58,
		ASTC_RGBA_12x12 = 59,
		PVRTC_2BPP_RGB = -127,
		PVRTC_2BPP_RGBA = -127,
		PVRTC_4BPP_RGB = -127,
		PVRTC_4BPP_RGBA = -127
	}
	export const enum TextureWrapMode {
		Repeat = 0,
		Clamp = 1,
		Mirror = 2,
		MirrorOnce = 3
	}
	interface CharacterInfo {
		advance: number;
		bearing: number;
		glyphHeight: number;
		glyphWidth: number;
		maxX: number;
		maxY: number;
		minX: number;
		minY: number;
		uvBottomLeft: UnityEngine.Vector2;
		uvBottomRight: UnityEngine.Vector2;
		uvTopLeft: UnityEngine.Vector2;
		uvTopRight: UnityEngine.Vector2;
	}
	interface Color {
		black: UnityEngine.Color;
		blue: UnityEngine.Color;
		clear: UnityEngine.Color;
		cyan: UnityEngine.Color;
		gamma: UnityEngine.Color;
		gray: UnityEngine.Color;
		grayscale: number;
		green: UnityEngine.Color;
		grey: UnityEngine.Color;
		Item: number;
		linear: UnityEngine.Color;
		magenta: UnityEngine.Color;
		maxColorComponent: number;
		red: UnityEngine.Color;
		white: UnityEngine.Color;
		yellow: UnityEngine.Color;
	}
	interface Font extends UnityEngine.Object {
		ascent: number;
		characterInfo: UnityEngine.CharacterInfo[];
		dynamic: boolean;
		fontNames: string[];
		fontSize: number;
		lineHeight: number;
		material: UnityEngine.Material;
		textureRebuildCallback: UnityEngine.Font.FontTextureRebuildCallback;
	}
	interface FrustumPlanes {
	}
	interface Hash128 {
		isValid: boolean;
	}
	interface Material extends UnityEngine.Object {
		color: UnityEngine.Color;
		doubleSidedGI: boolean;
		enableInstancing: boolean;
		globalIlluminationFlags: UnityEngine.MaterialGlobalIlluminationFlags;
		mainTexture: UnityEngine.Texture;
		mainTextureOffset: UnityEngine.Vector2;
		mainTextureScale: UnityEngine.Vector2;
		passCount: number;
		renderQueue: number;
		shader: UnityEngine.Shader;
		shaderKeywords: string[];
	}
	interface Matrix4x4 {
		decomposeProjection: UnityEngine.FrustumPlanes;
		determinant: number;
		identity: UnityEngine.Matrix4x4;
		inverse: UnityEngine.Matrix4x4;
		isIdentity: boolean;
		Item: number;
		Item: number;
		lossyScale: UnityEngine.Vector3;
		rotation: UnityEngine.Quaternion;
		transpose: UnityEngine.Matrix4x4;
		zero: UnityEngine.Matrix4x4;
	}
	interface Object {
		hideFlags: UnityEngine.HideFlags;
		name: string;
	}
	interface Quaternion {
		eulerAngles: UnityEngine.Vector3;
		identity: UnityEngine.Quaternion;
		Item: number;
		normalized: UnityEngine.Quaternion;
	}
	interface Rect {
		bottom: number;
		center: UnityEngine.Vector2;
		height: number;
		left: number;
		max: UnityEngine.Vector2;
		min: UnityEngine.Vector2;
		position: UnityEngine.Vector2;
		right: number;
		size: UnityEngine.Vector2;
		top: number;
		width: number;
		x: number;
		xMax: number;
		xMin: number;
		y: number;
		yMax: number;
		yMin: number;
		zero: UnityEngine.Rect;
	}
	interface ScriptableObject extends UnityEngine.Object {
	}
	interface Shader extends UnityEngine.Object {
		globalMaximumLOD: number;
		globalRenderPipeline: string;
		globalShaderHardwareTier: UnityEngine.Rendering.ShaderHardwareTier;
		isSupported: boolean;
		maximumLOD: number;
		passCount: number;
		renderQueue: number;
	}
	interface Texture extends UnityEngine.Object {
		allowThreadedTextureCreation: boolean;
		anisoLevel: number;
		anisotropicFiltering: UnityEngine.AnisotropicFiltering;
		currentTextureMemory: number;
		desiredTextureMemory: number;
		dimension: UnityEngine.Rendering.TextureDimension;
		filterMode: UnityEngine.FilterMode;
		graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
		height: number;
		imageContentsHash: UnityEngine.Hash128;
		isReadable: boolean;
		masterTextureLimit: number;
		mipMapBias: number;
		mipmapCount: number;
		nonStreamingTextureCount: number;
		nonStreamingTextureMemory: number;
		streamingMipmapUploadCount: number;
		streamingRendererCount: number;
		streamingTextureCount: number;
		streamingTextureDiscardUnusedMips: boolean;
		streamingTextureForceLoadAll: boolean;
		streamingTextureLoadingCount: number;
		streamingTexturePendingLoadCount: number;
		targetTextureMemory: number;
		texelSize: UnityEngine.Vector2;
		totalTextureMemory: number;
		updateCount: number;
		width: number;
		wrapMode: UnityEngine.TextureWrapMode;
		wrapModeU: UnityEngine.TextureWrapMode;
		wrapModeV: UnityEngine.TextureWrapMode;
		wrapModeW: UnityEngine.TextureWrapMode;
	}
	interface Texture2D extends UnityEngine.Texture {
		alphaIsTransparency: boolean;
		blackTexture: UnityEngine.Texture2D;
		calculatedMipmapLevel: number;
		desiredMipmapLevel: number;
		format: UnityEngine.TextureFormat;
		grayTexture: UnityEngine.Texture2D;
		isReadable: boolean;
		linearGrayTexture: UnityEngine.Texture2D;
		loadedMipmapLevel: number;
		loadingMipmapLevel: number;
		minimumMipmapLevel: number;
		normalTexture: UnityEngine.Texture2D;
		redTexture: UnityEngine.Texture2D;
		requestedMipmapLevel: number;
		streamingMipmaps: boolean;
		streamingMipmapsPriority: number;
		whiteTexture: UnityEngine.Texture2D;
	}
	interface Vector2 {
		down: UnityEngine.Vector2;
		Item: number;
		left: UnityEngine.Vector2;
		magnitude: number;
		negativeInfinity: UnityEngine.Vector2;
		normalized: UnityEngine.Vector2;
		one: UnityEngine.Vector2;
		positiveInfinity: UnityEngine.Vector2;
		right: UnityEngine.Vector2;
		sqrMagnitude: number;
		up: UnityEngine.Vector2;
		zero: UnityEngine.Vector2;
	}
	interface Vector3 {
		back: UnityEngine.Vector3;
		down: UnityEngine.Vector3;
		forward: UnityEngine.Vector3;
		fwd: UnityEngine.Vector3;
		Item: number;
		left: UnityEngine.Vector3;
		magnitude: number;
		negativeInfinity: UnityEngine.Vector3;
		normalized: UnityEngine.Vector3;
		one: UnityEngine.Vector3;
		positiveInfinity: UnityEngine.Vector3;
		right: UnityEngine.Vector3;
		sqrMagnitude: number;
		up: UnityEngine.Vector3;
		zero: UnityEngine.Vector3;
	}
}
declare namespace UnityEngine.Experimental.Rendering {
	export const enum GraphicsFormat {
		None = 0,
		R8_SRGB = 1,
		R8G8_SRGB = 2,
		R8G8B8_SRGB = 3,
		R8G8B8A8_SRGB = 4,
		R8_UNorm = 5,
		R8G8_UNorm = 6,
		R8G8B8_UNorm = 7,
		R8G8B8A8_UNorm = 8,
		R8_SNorm = 9,
		R8G8_SNorm = 10,
		R8G8B8_SNorm = 11,
		R8G8B8A8_SNorm = 12,
		R8_UInt = 13,
		R8G8_UInt = 14,
		R8G8B8_UInt = 15,
		R8G8B8A8_UInt = 16,
		R8_SInt = 17,
		R8G8_SInt = 18,
		R8G8B8_SInt = 19,
		R8G8B8A8_SInt = 20,
		R16_UNorm = 21,
		R16G16_UNorm = 22,
		R16G16B16_UNorm = 23,
		R16G16B16A16_UNorm = 24,
		R16_SNorm = 25,
		R16G16_SNorm = 26,
		R16G16B16_SNorm = 27,
		R16G16B16A16_SNorm = 28,
		R16_UInt = 29,
		R16G16_UInt = 30,
		R16G16B16_UInt = 31,
		R16G16B16A16_UInt = 32,
		R16_SInt = 33,
		R16G16_SInt = 34,
		R16G16B16_SInt = 35,
		R16G16B16A16_SInt = 36,
		R32_UInt = 37,
		R32G32_UInt = 38,
		R32G32B32_UInt = 39,
		R32G32B32A32_UInt = 40,
		R32_SInt = 41,
		R32G32_SInt = 42,
		R32G32B32_SInt = 43,
		R32G32B32A32_SInt = 44,
		R16_SFloat = 45,
		R16G16_SFloat = 46,
		R16G16B16_SFloat = 47,
		R16G16B16A16_SFloat = 48,
		R32_SFloat = 49,
		R32G32_SFloat = 50,
		R32G32B32_SFloat = 51,
		R32G32B32A32_SFloat = 52,
		B8G8R8_SRGB = 56,
		B8G8R8A8_SRGB = 57,
		B8G8R8_UNorm = 58,
		B8G8R8A8_UNorm = 59,
		B8G8R8_SNorm = 60,
		B8G8R8A8_SNorm = 61,
		B8G8R8_UInt = 62,
		B8G8R8A8_UInt = 63,
		B8G8R8_SInt = 64,
		B8G8R8A8_SInt = 65,
		R4G4B4A4_UNormPack16 = 66,
		B4G4R4A4_UNormPack16 = 67,
		R5G6B5_UNormPack16 = 68,
		B5G6R5_UNormPack16 = 69,
		R5G5B5A1_UNormPack16 = 70,
		B5G5R5A1_UNormPack16 = 71,
		A1R5G5B5_UNormPack16 = 72,
		E5B9G9R9_UFloatPack32 = 73,
		B10G11R11_UFloatPack32 = 74,
		A2B10G10R10_UNormPack32 = 75,
		A2B10G10R10_UIntPack32 = 76,
		A2B10G10R10_SIntPack32 = 77,
		A2R10G10B10_UNormPack32 = 78,
		A2R10G10B10_UIntPack32 = 79,
		A2R10G10B10_SIntPack32 = 80,
		A2R10G10B10_XRSRGBPack32 = 81,
		A2R10G10B10_XRUNormPack32 = 82,
		R10G10B10_XRSRGBPack32 = 83,
		R10G10B10_XRUNormPack32 = 84,
		A10R10G10B10_XRSRGBPack32 = 85,
		A10R10G10B10_XRUNormPack32 = 86,
		RGB_DXT1_SRGB = 96,
		RGBA_DXT1_SRGB = 96,
		RGB_DXT1_UNorm = 97,
		RGBA_DXT1_UNorm = 97,
		RGBA_DXT3_SRGB = 98,
		RGBA_DXT3_UNorm = 99,
		RGBA_DXT5_SRGB = 100,
		RGBA_DXT5_UNorm = 101,
		R_BC4_UNorm = 102,
		R_BC4_SNorm = 103,
		RG_BC5_UNorm = 104,
		RG_BC5_SNorm = 105,
		RGB_BC6H_UFloat = 106,
		RGB_BC6H_SFloat = 107,
		RGBA_BC7_SRGB = 108,
		RGBA_BC7_UNorm = 109,
		RGB_PVRTC_2Bpp_SRGB = 110,
		RGB_PVRTC_2Bpp_UNorm = 111,
		RGB_PVRTC_4Bpp_SRGB = 112,
		RGB_PVRTC_4Bpp_UNorm = 113,
		RGBA_PVRTC_2Bpp_SRGB = 114,
		RGBA_PVRTC_2Bpp_UNorm = 115,
		RGBA_PVRTC_4Bpp_SRGB = 116,
		RGBA_PVRTC_4Bpp_UNorm = 117,
		RGB_ETC_UNorm = 118,
		RGB_ETC2_SRGB = 119,
		RGB_ETC2_UNorm = 120,
		RGB_A1_ETC2_SRGB = 121,
		RGB_A1_ETC2_UNorm = 122,
		RGBA_ETC2_SRGB = 123,
		RGBA_ETC2_UNorm = 124,
		R_EAC_UNorm = 125,
		R_EAC_SNorm = 126,
		RG_EAC_UNorm = 127,
		RG_EAC_SNorm = 128,
		RGBA_ASTC4X4_SRGB = 129,
		RGBA_ASTC4X4_UNorm = 130,
		RGBA_ASTC5X5_SRGB = 131,
		RGBA_ASTC5X5_UNorm = 132,
		RGBA_ASTC6X6_SRGB = 133,
		RGBA_ASTC6X6_UNorm = 134,
		RGBA_ASTC8X8_SRGB = 135,
		RGBA_ASTC8X8_UNorm = 136,
		RGBA_ASTC10X10_SRGB = 137,
		RGBA_ASTC10X10_UNorm = 138,
		RGBA_ASTC12X12_SRGB = 139,
		RGBA_ASTC12X12_UNorm = 140
	}
}
declare namespace UnityEngine.Font {
	interface FontTextureRebuildCallback extends System.MulticastDelegate {
	}
}
declare namespace UnityEngine.Rendering {
	export const enum ShaderHardwareTier {
		Tier1 = 0,
		Tier2 = 1,
		Tier3 = 2
	}
	export const enum TextureDimension {
		Unknown = -1,
		None = 0,
		Any = 1,
		Tex2D = 2,
		Tex3D = 3,
		Cube = 4,
		Tex2DArray = 5,
		CubeArray = 6
	}
}
declare namespace UnityEngine.UIElements {
	export const enum Align {
		Auto = 0,
		FlexStart = 1,
		Center = 2,
		FlexEnd = 3,
		Stretch = 4
	}
	export const enum ContextType {
		Player = 0,
		Editor = 1
	}
	export const enum DisplayStyle {
		Flex = 0,
		None = 1
	}
	export const enum FlexDirection {
		Column = 0,
		ColumnReverse = 1,
		Row = 2,
		RowReverse = 3
	}
	export const enum Justify {
		FlexStart = 0,
		Center = 1,
		FlexEnd = 2,
		SpaceBetween = 3,
		SpaceAround = 4
	}
	export const enum LengthUnit {
		Pixel = 0,
		Percent = 1
	}
	export const enum Overflow {
		Visible = 0,
		Hidden = 1
	}
	export const enum OverflowClipBox {
		PaddingBox = 0,
		ContentBox = 1
	}
	export const enum PickingMode {
		Position = 0,
		Ignore = 1
	}
	export const enum Position {
		Relative = 0,
		Absolute = 1
	}
	export const enum StyleKeyword {
		Undefined = 0,
		Null = 1,
		Auto = 2,
		None = 3,
		Initial = 4
	}
	export const enum UsageHints {
		None = 0,
		DynamicTransform = 1,
		GroupTransform = 2
	}
	export const enum Visibility {
		Visible = 0,
		Hidden = 1
	}
	export const enum WhiteSpace {
		Normal = 0,
		NoWrap = 1
	}
	export const enum Wrap {
		NoWrap = 0,
		Wrap = 1,
		WrapReverse = 2
	}
	interface Background {
		texture: UnityEngine.Texture2D;
		vectorImage: UnityEngine.UIElements.VectorImage;
	}
	interface CallbackEventHandler {
	}
	interface ContextualMenuManager {
	}
	interface Cursor {
		hotspot: UnityEngine.Vector2;
		texture: UnityEngine.Texture2D;
	}
	interface EventDispatcher {
	}
	interface Focusable extends UnityEngine.UIElements.CallbackEventHandler {
		canGrabFocus: boolean;
		delegatesFocus: boolean;
		focusable: boolean;
		focusController: UnityEngine.UIElements.FocusController;
		tabIndex: number;
	}
	interface FocusController {
		focusedElement: UnityEngine.UIElements.Focusable;
	}
	interface ICustomStyle {
	}
	interface IExperimentalFeatures {
		animation: UnityEngine.UIElements.Experimental.ITransitionAnimations;
	}
	interface IPanel {
		contextType: UnityEngine.UIElements.ContextType;
		contextualMenuManager: UnityEngine.UIElements.ContextualMenuManager;
		dispatcher: UnityEngine.UIElements.EventDispatcher;
		focusController: UnityEngine.UIElements.FocusController;
		visualTree: UnityEngine.UIElements.VisualElement;
	}
	interface IResolvedStyle {
		alignContent: UnityEngine.UIElements.Align;
		alignItems: UnityEngine.UIElements.Align;
		alignSelf: UnityEngine.UIElements.Align;
		backgroundColor: UnityEngine.Color;
		borderBottomColor: UnityEngine.Color;
		borderBottomLeftRadius: number;
		borderBottomRightRadius: number;
		borderBottomWidth: number;
		borderColor: UnityEngine.Color;
		borderLeftColor: UnityEngine.Color;
		borderLeftWidth: number;
		borderRightColor: UnityEngine.Color;
		borderRightWidth: number;
		borderTopColor: UnityEngine.Color;
		borderTopLeftRadius: number;
		borderTopRightRadius: number;
		borderTopWidth: number;
		bottom: number;
		color: UnityEngine.Color;
		display: UnityEngine.UIElements.DisplayStyle;
		flexBasis: UnityEngine.UIElements.StyleFloat;
		flexDirection: UnityEngine.UIElements.FlexDirection;
		flexGrow: number;
		flexShrink: number;
		flexWrap: UnityEngine.UIElements.Wrap;
		fontSize: number;
		height: number;
		justifyContent: UnityEngine.UIElements.Justify;
		left: number;
		marginBottom: number;
		marginLeft: number;
		marginRight: number;
		marginTop: number;
		maxHeight: UnityEngine.UIElements.StyleFloat;
		maxWidth: UnityEngine.UIElements.StyleFloat;
		minHeight: UnityEngine.UIElements.StyleFloat;
		minWidth: UnityEngine.UIElements.StyleFloat;
		opacity: number;
		paddingBottom: number;
		paddingLeft: number;
		paddingRight: number;
		paddingTop: number;
		position: UnityEngine.UIElements.Position;
		right: number;
		top: number;
		unityBackgroundImageTintColor: UnityEngine.Color;
		unityBackgroundScaleMode: UnityEngine.ScaleMode;
		unityFont: UnityEngine.Font;
		unityFontStyleAndWeight: UnityEngine.FontStyle;
		unitySliceBottom: number;
		unitySliceLeft: number;
		unitySliceRight: number;
		unitySliceTop: number;
		unityTextAlign: UnityEngine.TextAnchor;
		visibility: UnityEngine.UIElements.Visibility;
		whiteSpace: UnityEngine.UIElements.WhiteSpace;
		width: number;
	}
	interface IStyle {
		alignContent: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align>;
		alignItems: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align>;
		alignSelf: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align>;
		backgroundColor: UnityEngine.UIElements.StyleColor;
		backgroundImage: UnityEngine.UIElements.StyleBackground;
		borderBottomColor: UnityEngine.UIElements.StyleColor;
		borderBottomLeftRadius: UnityEngine.UIElements.StyleLength;
		borderBottomRightRadius: UnityEngine.UIElements.StyleLength;
		borderBottomWidth: UnityEngine.UIElements.StyleFloat;
		borderColor: UnityEngine.UIElements.StyleColor;
		borderLeftColor: UnityEngine.UIElements.StyleColor;
		borderLeftWidth: UnityEngine.UIElements.StyleFloat;
		borderRightColor: UnityEngine.UIElements.StyleColor;
		borderRightWidth: UnityEngine.UIElements.StyleFloat;
		borderTopColor: UnityEngine.UIElements.StyleColor;
		borderTopLeftRadius: UnityEngine.UIElements.StyleLength;
		borderTopRightRadius: UnityEngine.UIElements.StyleLength;
		borderTopWidth: UnityEngine.UIElements.StyleFloat;
		bottom: UnityEngine.UIElements.StyleLength;
		color: UnityEngine.UIElements.StyleColor;
		cursor: UnityEngine.UIElements.StyleCursor;
		display: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.DisplayStyle>;
		flexBasis: UnityEngine.UIElements.StyleLength;
		flexDirection: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.FlexDirection>;
		flexGrow: UnityEngine.UIElements.StyleFloat;
		flexShrink: UnityEngine.UIElements.StyleFloat;
		flexWrap: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Wrap>;
		fontSize: UnityEngine.UIElements.StyleLength;
		height: UnityEngine.UIElements.StyleLength;
		justifyContent: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Justify>;
		left: UnityEngine.UIElements.StyleLength;
		marginBottom: UnityEngine.UIElements.StyleLength;
		marginLeft: UnityEngine.UIElements.StyleLength;
		marginRight: UnityEngine.UIElements.StyleLength;
		marginTop: UnityEngine.UIElements.StyleLength;
		maxHeight: UnityEngine.UIElements.StyleLength;
		maxWidth: UnityEngine.UIElements.StyleLength;
		minHeight: UnityEngine.UIElements.StyleLength;
		minWidth: UnityEngine.UIElements.StyleLength;
		opacity: UnityEngine.UIElements.StyleFloat;
		overflow: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Overflow>;
		paddingBottom: UnityEngine.UIElements.StyleLength;
		paddingLeft: UnityEngine.UIElements.StyleLength;
		paddingRight: UnityEngine.UIElements.StyleLength;
		paddingTop: UnityEngine.UIElements.StyleLength;
		position: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Position>;
		right: UnityEngine.UIElements.StyleLength;
		top: UnityEngine.UIElements.StyleLength;
		unityBackgroundImageTintColor: UnityEngine.UIElements.StyleColor;
		unityBackgroundScaleMode: UnityEngine.UIElements.StyleEnum<UnityEngine.ScaleMode>;
		unityFont: UnityEngine.UIElements.StyleFont;
		unityFontStyleAndWeight: UnityEngine.UIElements.StyleEnum<UnityEngine.FontStyle>;
		unityOverflowClipBox: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.OverflowClipBox>;
		unitySliceBottom: UnityEngine.UIElements.StyleInt;
		unitySliceLeft: UnityEngine.UIElements.StyleInt;
		unitySliceRight: UnityEngine.UIElements.StyleInt;
		unitySliceTop: UnityEngine.UIElements.StyleInt;
		unityTextAlign: UnityEngine.UIElements.StyleEnum<UnityEngine.TextAnchor>;
		visibility: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Visibility>;
		whiteSpace: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.WhiteSpace>;
		width: UnityEngine.UIElements.StyleLength;
	}
	interface ITransform {
		matrix: UnityEngine.Matrix4x4;
		position: UnityEngine.Vector3;
		rotation: UnityEngine.Quaternion;
		scale: UnityEngine.Vector3;
	}
	interface IVisualElementScheduler {
	}
	interface Length {
		unit: UnityEngine.UIElements.LengthUnit;
		value: number;
	}
	interface MeshGenerationContext {
		visualElement: UnityEngine.UIElements.VisualElement;
	}
	interface StyleBackground {
		keyword: UnityEngine.UIElements.StyleKeyword;
		value: UnityEngine.UIElements.Background;
	}
	interface StyleColor {
		keyword: UnityEngine.UIElements.StyleKeyword;
		value: UnityEngine.Color;
	}
	interface StyleCursor {
		keyword: UnityEngine.UIElements.StyleKeyword;
		value: UnityEngine.UIElements.Cursor;
	}
	interface StyleEnum<T> {
		keyword: UnityEngine.UIElements.StyleKeyword;
		value: T;
	}
	interface StyleFloat {
		keyword: UnityEngine.UIElements.StyleKeyword;
		value: number;
	}
	interface StyleFont {
		keyword: UnityEngine.UIElements.StyleKeyword;
		value: UnityEngine.Font;
	}
	interface StyleInt {
		keyword: UnityEngine.UIElements.StyleKeyword;
		value: number;
	}
	interface StyleLength {
		keyword: UnityEngine.UIElements.StyleKeyword;
		value: UnityEngine.UIElements.Length;
	}
	interface StyleSheet extends UnityEngine.ScriptableObject {
	}
	interface VectorImage extends UnityEngine.ScriptableObject {
	}
	interface VisualElement extends UnityEngine.UIElements.Focusable {
		cacheAsBitmap: boolean;
		canGrabFocus: boolean;
		childCount: number;
		contentContainer: UnityEngine.UIElements.VisualElement;
		contentRect: UnityEngine.Rect;
		customStyle: UnityEngine.UIElements.ICustomStyle;
		enabledInHierarchy: boolean;
		enabledSelf: boolean;
		experimental: UnityEngine.UIElements.IExperimentalFeatures;
		focusController: UnityEngine.UIElements.FocusController;
		generateVisualContent: System.Action<UnityEngine.UIElements.MeshGenerationContext>;
		hierarchy: UnityEngine.UIElements.VisualElement.Hierarchy;
		Item: UnityEngine.UIElements.VisualElement;
		layout: UnityEngine.Rect;
		localBound: UnityEngine.Rect;
		name: string;
		panel: UnityEngine.UIElements.IPanel;
		parent: UnityEngine.UIElements.VisualElement;
		pickingMode: UnityEngine.UIElements.PickingMode;
		resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
		schedule: UnityEngine.UIElements.IVisualElementScheduler;
		style: UnityEngine.UIElements.IStyle;
		styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
		tooltip: string;
		transform: UnityEngine.UIElements.ITransform;
		usageHints: UnityEngine.UIElements.UsageHints;
		userData: any;
		viewDataKey: string;
		visible: boolean;
		worldBound: UnityEngine.Rect;
		worldTransform: UnityEngine.Matrix4x4;
	}
	interface VisualElementStyleSheetSet {
		count: number;
		Item: UnityEngine.UIElements.StyleSheet;
	}
}
declare namespace UnityEngine.UIElements.Experimental {
	interface ITransitionAnimations {
	}
}
declare namespace UnityEngine.UIElements.VisualElement {
	interface Hierarchy {
		childCount: number;
		Item: UnityEngine.UIElements.VisualElement;
		parent: UnityEngine.UIElements.VisualElement;
	}
}
